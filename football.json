
The Startup
Published in
The Startup

You have 2 free member-only stories left this month. Sign up for Medium and get an extra one

Rohit Rawat
Rohit Rawat
Follow
Mar 29, 2020

·
11 min read
·

·

Listen


Save





Create a List in Android using RecyclerView — Part 2

Welcome
In Part 1 of this series, we created a list in Android using some static movies data. But what if we want to populate a list using some web service like some news articles. Welcome to Part 2 of ‘Create a List in Android using RecyclerView’ series.

In this article we will be creating a list in Android using RecyclerView, Retrofit and a Web Service. We have already discussed about RecyclerView in Part 1.

According to Wikipedia, Web service is either a service offered by an electronic device to another electronic device or a server running on a computer device, listening for requests at a particular port over a network. In our case it is a server of NewsAPI. So basically we are going to use NewsAPI as our Web Service in this article.

Retrofit is an REST client library for Java and Android which is used to create HTTP request and process HTTP response from a REST API (Web Service). It was developed by Square Inc. In this article we are going to request and receive JSON data from NewsAPI but do note that Retrofit can also be used to request and receive other type of data like SimpleXML and Jackson.

Although, there are other HTTP Clients too, but Retrofit is the most popular among them. I have used Volley by Google and AsyncTask class from Android library to request APIs, but switched to Retrofit due to its seamless request and response experience. It focuses on the abstraction of HTTP request/response. Let’s jump right in.

Dependencies
Retrofit is not a part of Android legacy library, so we need to add a dependency for it too, just like we did for RecyclerView.

implementation 'com.squareup.retrofit2:retrofit:2.1.0'
implementation 'com.squareup.retrofit2:converter-gson:2.1.0'
implementation 'com.squareup.okhttp3:logging-interceptor:3.4.1'
implementation 'androidx.recyclerview:recyclerview:1.1.0'
You may notice that here only one dependency belongs to retrofit. So, what are the others?

Retrofit GSON is a converter library which uses Google GSON for serialization of strings to and from JSON type objects. Google GSON is itself a serialization/de-serialization library but Retrofit has overriden it to make it work with its network requests.

OkHTTP Logging Interceptor (sounds heavy), is a HTTP request logger. By this, I mean when we face trouble with request or response in Retrofit, this library comes handy. It logs all the information about every request/response you make using Retrofit, to Android Studio Logcat.

After adding these dependencies, the dependency section of your app-level build.gradle should look like this:

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // AndroidX Support
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    // RecyclerView
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.1.0'
    // Retrofit Gson Converter
    implementation 'com.squareup.retrofit2:converter-gson:2.1.0'
    // HttpLoggingInterceptor
    implementation 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
After synchronizing, you are ready to rock!

We will try to work a little professionally here from now on. First of all, we will put our Java classes in contextual packages. We will be using Java interface for some tasks in this article. And we will be using some industry level code conventions in this and upcoming articles. Feel free to ask questions about anything that strikes odd to you. I ensure you that using these code conventions will improve your code quality and workflow. Try to catch-up.

Permission to sail the ship!
So, far we haven’t done anything that requires us to make changes in THE ANDROIDMANIFEST.XML. For now just know that whenever we have to access the resources of an Android device, we have to tell the OS that ‘we are going to need these resources in our application’. And how do we do that? By writing something in a file called AndroidManifest.xml. It defines the structure, metadata, components and requirements of our application.

So open AndroidManifest.xml and add internet permission line in it.

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.prezrohit.recyclerviewexample">
    <uses-permission android:name="android.permission.INTERNET" />
    <application
        android:allowBackup="true"
        ...
        ...
A brief look at the Web Service
As I said earlier that we will be using a Web Service in this article, so at this point you need to visit https://newsapi.org/ and set a free account.


Account Setup Successful Screen
After successfully setting up your account, go back to home.

Go to ‘Documentation’ in the title bar and there you will be able to see the different API endpoints you can hit using the API key provided. Try copying a link and pasting it in your browser (I’ll recommend Firefox Developer Edition for this). You’ll see something like this:


Top Headlines API Endpoint Response
So, basically what we do is populate this raw data in some fancy looking Android layout. And this is just sufficient data to show Top Headlines from NewsAPI.

Now, let’s set up our API Client which will be used here to load this data. Create a Java class named WebServiceClient.java and copy the following code in it:

import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class WebServiceClient {

   static Retrofit getClient() {

      OkHttpClient client = new OkHttpClient.Builder().addInterceptor(new HttpLoggingInterceptor()
                  .setLevel(HttpLoggingInterceptor.Level.BODY)).build();

      return new Retrofit.Builder()
            .baseUrl("http://newsapi.org/v2/")
            .addConverterFactory(GsonConverterFactory.create())
            .client(client)
            .build();
   }

}
Here, we have created a static method getClient(), which returns a Retrofit object by creating it using base URL, GsonConverterFactory, OkHTTPClient and OkHTTPLoggingInterceptor.

Now to capture response data, we need to create some DTOs (Data Transfer Objects which are just Java classes used to carry data from and to client and server). If you take a look at the Top Headlines response, you will notice that it contains three fields at the root level namely — status (a String), totalResults (an Integer but we can declare it as String since we are using GsonConverterFactory and it will do the conversion for us implicitly), articles (an Array of Article type). Further we see that Source field inside Article class is having some fields inside it too. So, we conclude that here we are going to use bottom-up approach. Let’s code it down.

Source.java

import com.google.gson.annotations.SerializedName;

public class Source {

   @SerializedName("id")
   private String id;

   @SerializedName("name")
   private String name;

   public String getId() {
      return id;
   }

   public String getName() {
      return name;
   }
}
Article.java

import com.google.gson.annotations.SerializedName;

public class Article {

   @SerializedName("source")
   private Source source;

   @SerializedName("author")
   private String author;

   @SerializedName("title")
   private String title;

   @SerializedName("description")
   private String description;

   @SerializedName("url")
   private String url;

   @SerializedName("urlToImage")
   private String urlToImage;

   @SerializedName("publishedAt")
   private String publishedAt;

   @SerializedName("content")
   private String content;

   public Source getSource() {
      return source;
   }

   public String getAuthor() {
      return author;
   }

   public String getTitle() {
      return title;
   }

   public String getDescription() {
      return description;
   }

   public String getUrl() {
      return url;
   }

   public String getUrlToImage() {
      return urlToImage;
   }

   public String getPublishedAt() {
      return publishedAt;
   }

   public String getContent() {
      return content;
   }
   
}
TopHeadlines.java

import com.google.gson.annotations.SerializedName;

import java.util.List;

public class TopHeadline {

   @SerializedName("status")
   private String status;

   @SerializedName("totalResults")
   private String totalResults;

   @SerializedName("articles")
   private List<Article> articleList;

   public String getStatus() {
      return status;
   }

   public String getTotalResults() {
      return totalResults;
   }

   public List<Article> getArticleList() {
      return articleList;
   }
   
}
Two things to notice here, first being @SerializedName() — it is used to pass a name to the converter factory to help in the serialization and de-serialization of JSON data into Java objects Meaning that after writing @SerializedName("status") the value of status key will be stored in the status field of TopHeadlines class object.

Second thing to notice is that we don’t need to declare setter methods in our response DTOs since we are never going to set their values — they are receiver objects after all.

To simplify this DTO creation process, you can use some online tools to get the class definitions of required DTOs by passing your response there. One such tool is jsonschema2pojo. Just copy the API response and paste into the placeholder at this website and click on preview. Done!

Now we are ready to define a web service interface named WebService.java. It contains API endpoint calling methods and determine what type of data we need to read from a certain endpoint.

WebService.java

import com.cradle.recyclerviewexample.dto.TopHeadline;

import retrofit2.Call;
import retrofit2.http.GET;
import retrofit2.http.Query;

interface WebService {

   @GET("top-headlines")
   Call<TopHeadline> getTopHeadlines(@Query("country") String country, @Query("apiKey") String apiKey);
   
}
‘top-headlines’ is a GET endpoint — hence the @GET annotation and it takes two query parameters namely — country and apiKey. So, when we will call this endpoint we need to pass these two parameters or the API won’t hit or throw some error. This is the power of Java interface.

We need to create a row item layout for the list, just like we did in the previous article in this series. A row layout file defines how the items are going to look in our list.

For that we are gonna another AndroidX Support Library called CardView which just makes the view look like a card like who might have seen in some Google Apps.

Now open your app level build.gradle and add the following line to the dependency section and sync gradle.

implementation "androidx.cardview:cardview:1.0.0"
Now create a layout file and name it row_news.xml and copy the following code into it.

<?xml version="1.0" encoding="utf-8"?>
<androidx.cardview.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="8dp"
    android:elevation="8dp"
    android:padding="10dp"
    app:cardBackgroundColor="#E5E5E5"
    app:cardCornerRadius="12dp">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal">

        <androidx.cardview.widget.CardView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_margin="5dp"
            android:elevation="0dp"
            app:cardCornerRadius="12dp"
            android:layout_gravity="center">

            <ImageView
                android:id="@+id/img_thumbnail"
                android:layout_width="80dp"
                android:layout_height="80dp"
                android:scaleType="centerCrop"
                android:src="@drawable/ic_thumbnail" />

        </androidx.cardview.widget.CardView>

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_gravity="center"
            android:orientation="vertical">

            <TextView
                android:id="@+id/txt_title"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginStart="5dp"
                android:layout_marginEnd="10dp"
                android:ellipsize="end"
                android:maxLines="2"
                android:padding="5dp"
                android:text="This is a sample news title which has no intent"
                android:textSize="18sp"
                android:textStyle="bold" />

            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content">

                <TextView
                    android:id="@+id/txt_source_name"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginStart="5dp"
                    android:layout_weight="2"
                    android:padding="5dp"
                    android:text="Washington Post"
                    android:maxLines="1"
                    android:ellipsize="end"
                    android:textSize="15sp" />

                <TextView
                    android:id="@+id/txt_date"
                    android:layout_width="wrap_content"
                    android:layout_height="wrap_content"
                    android:layout_marginEnd="10dp"
                    android:layout_weight="2"
                    android:padding="5dp"
                    android:text="9 Mar 2020"
                    android:maxLines="1"
                    android:ellipsize="end"
                    android:textAlignment="viewEnd"
                    android:textSize="15sp" />

            </LinearLayout>

        </LinearLayout>

    </LinearLayout>

</androidx.cardview.widget.CardView>
